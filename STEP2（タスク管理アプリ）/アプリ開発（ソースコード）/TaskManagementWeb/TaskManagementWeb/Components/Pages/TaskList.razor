@page "/"

@using TaskManagementWeb.Services
@using TaskManagementWeb.Models
@using TaskManagementWeb.Helpers
@inject TaskService TaskService
@inject TaskTagService TaskTagService

<h3 class="text-xl font-bold mb-4">タスク一覧</h3>

@if (Tasks == null)
{
				<p>読み込み中...</p>
}
else
{
		   <div class="max-w-screen-2xl mx-auto px-4">
				<table class="table-auto w-full border-4 border-black border-collapse rounded-lg">
				<thead class="bg-gray-100">
					<tr>
						<th class="p-2 border border-gray-300">タスク名</th>
						<th class="p-2 border border-gray-300">説明</th>
						<th class="p-2 border border-gray-300">タスク分類</th>
						<th class="p-2 border border-gray-300">タスク完了期限</th>
						<th class="p-2 border border-gray-300">タスク完了日時</th>
						<th class="p-2 border border-gray-300">タスク更新日時</th>
						<th class="p-2 border border-gray-300">タスク状況</th>
						<th class="p-2 border border-gray-300 text-center">削除/完了選択</th>
					</tr>
				</thead>
				<tbody>
			@foreach (var task in PagedTasks)
			{
				<tr>
					<!-- タスク名 -->
				    <td class="p-2 border border-gray-300">
		               <textarea id="taskName-@task.TaskNo"
		                  value="@task.TempTaskName"
		                  @oninput="(e) => OnTaskNameInput(task, e)"
		                  @onblur="async () => await ValidateAndSaveTaskAsync(task)"
		                  class="w-full font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
		            </textarea>
				    </td>

					<!-- 説明 -->
					<td class="p-2 border border-gray-300">
					   <textarea id="description-@task.TaskNo"
						  value="@task.TempDescription"
						  @oninput="(e) => OnDescriptionInput(task, e)"
						  @onblur="async () => await SaveDescriptionAsync(task)"
						  class="w-full font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
			        </textarea>
				    </td>

					<!-- タスク分類 -->
				    <td class="p-2 border border-gray-300">
				       <InputSelect TValue="int"
				       	   Value="@task.TagNo"
				       	   ValueChanged="@(v => OnTagChanged(task, v))"
				       	   ValueExpression="(() => task.TagNo)"
				       	   class="w-full font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
				       	   @foreach (var tag in TagDictionary)
				       	   {
				       	   	 <option value="@tag.Key">@tag.Value</option>
				       	   }
				       </InputSelect>
				    </td>

					<!-- タスク完了期限 -->
		            <td class="p-2 border border-gray-300">
		                <input type="datetime-local"
		                    value="@task.DueDateString"
		                    @oninput="(ChangeEventArgs e) => { task.DueDateString = e.Value?.ToString() ?? string.Empty; }"
		                    @onchange="async (ChangeEventArgs e) => await OnDueDateChangedAsync(task, e)"
		                    class="w-full font-normal bg-transparent border border-transparent hover:border-gray-300
                            focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200" />

		            </td>

					<!-- タスク完了日時 -->
		            <td class="p-2 border border-gray-300">
		            	<input type="datetime-local"
		            		class="w-full font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200"
		            		value="@task.DoneDateString"
		            		@onchange="async (ChangeEventArgs e) => await OnDoneDateChangedAsync(task, e)" />
		            </td>

					<!-- タスク更新日時 -->
                    <td class="p-2 border border-gray-300 text-gray-700">
						@task.UpdateDate?.ToString("yyyy/MM/dd HH:mm")
                    </td>

					<!-- タスク状況 -->
		            <td class="p-2 border border-gray-300">
		                <InputSelect TValue="int"
		        		   Value="@task.IsActive"
		        		   ValueChanged="@(v => OnStatusChanged(task, v))"
		        		   ValueExpression="(() => task.IsActive)"
		        		   class="w-full font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
		        	        @foreach (var status in TaskStatusHelper.StatusMap)
		        			{
		        			   <option value="@status.Key">@status.Value</option>
		        			}
						</InputSelect>
		            </td>

					<!-- 削除/完了選択 -->
		            <td class="p-2 border border-gray-300 text-center">
		            	<input type="checkbox" @bind="task.IsChecked" />
		            </td>
				</tr>
			}
				</tbody>
			</table>

				<div class="mt-4 flex justify-between">
					<button class="px-4 py-2 bg-gray-300 rounded" @onclick="PreviousPage" disabled="@(PageIndex == 0)">前へ</button>
					<button class="px-4 py-2 bg-gray-300 rounded" @onclick="NextPage" disabled="@((PageIndex + 1) * PageSize >= Tasks.Count)">次へ</button>
				</div>

				<div class="mt-4 flex gap-4">
					<button class="px-4 py-2 bg-green-500 text-white rounded" @onclick="MarkDone">完了</button>
					<button class="px-4 py-2 bg-red-500 text-white rounded" @onclick="DeleteTasks">削除</button>
				</div>
		 </div>

	@if (!string.IsNullOrEmpty(LogMessage))
	{
		<div class="mt-4 p-2 border rounded @(
		IsErrorMessage
		? "bg-red-100 text-red-800 border-red-400"
		: "bg-green-100 text-green-700 border-green-400")">
			@LogMessage
		</div>
	}
}

@code {
	private List<TaskModel> Tasks;
	private List<TaskModel> PagedTasks;
	private int PageSize = 5;
	private int PageIndex = 0;
	private bool IsErrorMessage = false;
	private string LogMessage = string.Empty;

	private Dictionary<int, string> TagDictionary = new();

	private void OnTaskNameInput(TaskModel task, ChangeEventArgs e)
	{
		var input = e.Value?.ToString() ?? "";
		task.TempTaskName = input;
		LogMessage = "";  // 入力中はエラー表示なし
		StateHasChanged();
	}

	private void OnDescriptionInput(TaskModel task, ChangeEventArgs e)
	{
		var input = e.Value?.ToString() ?? "";

		if (input.Length > 30)
		{
			LogMessage = "説明は30文字以内で入力してください。";
			IsErrorMessage = true;
		}
		else
		{
			LogMessage = "";
			IsErrorMessage = false;
		}

		task.TempDescription = input;

		StateHasChanged();
	}

	private (bool hasChanges, string changeMessage) GetChangeMessage(TaskModel dbTask, TaskModel currentTask)
	{
		var messages = new List<string>();

		string FromOrBlank(string? text) => string.IsNullOrWhiteSpace(text) ? "未設定" : text;

		if (dbTask.TaskName != currentTask.TaskName)
			messages.Add($"タスク名：{FromOrBlank(dbTask.TaskName)} ⇒ {FromOrBlank(currentTask.TaskName)}");

		string NormalizeDescription(string? desc) => string.IsNullOrWhiteSpace(desc) ? "" : desc;

		if (NormalizeDescription(dbTask.Description) != NormalizeDescription(currentTask.Description))
			messages.Add($"説明：{FromOrBlank(dbTask.Description)} ⇒ {FromOrBlank(currentTask.Description)}");

		if (dbTask.TagNo != currentTask.TagNo)
			messages.Add($"タスク分類：{TagDictionary.GetValueOrDefault(dbTask.TagNo, "未設定")} ⇒ {TagDictionary.GetValueOrDefault(currentTask.TagNo, "未設定")}");

		if (dbTask.DueDate?.ToString("yyyy/MM/dd HH:mm") != currentTask.DueDate?.ToString("yyyy/MM/dd HH:mm"))
			messages.Add($"タスク完了期限：{dbTask.DueDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"} ⇒ {currentTask.DueDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"}");

		if (dbTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") != currentTask.DoneDate?.ToString("yyyy/MM/dd HH:mm"))
			messages.Add($"タスク完了日時：{dbTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"} ⇒ {currentTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"}");

		if (dbTask.IsActive != currentTask.IsActive)
			messages.Add($"タスク状況：{TaskStatusHelper.StatusMap[dbTask.IsActive]} ⇒ {TaskStatusHelper.StatusMap[currentTask.IsActive]}");

		bool hasChanges = messages.Count > 0;
		string changeMessage = string.Join(" | ", messages);

		return (hasChanges, changeMessage);
	}

	private async Task OnDueDateChangedAsync(TaskModel task, ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? "";

		if (string.IsNullOrWhiteSpace(newValue))
		{
			LogMessage = "タスク完了期限は必須です。";
			IsErrorMessage = true;
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DueDateString = dbTask.DueDate?.ToString("yyyy-MM-ddTHH:mm") ?? "";
				task.DueDate = dbTask.DueDate;
			}
			StateHasChanged();
			return;
		}

		if (!DateTime.TryParse(newValue, out var dueDate))
		{
			LogMessage = "タスク完了期限の形式が正しくありません。";
			IsErrorMessage = true;
			StateHasChanged();
			return;
		}

		task.DueDateString = newValue;
		task.DueDate = dueDate;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;
			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DueDateString = dbTask.DueDate?.ToString("yyyy-MM-ddTHH:mm") ?? "";
				task.DueDate = dbTask.DueDate;
			}
		}
		StateHasChanged();
	}

	private async Task OnDoneDateChangedAsync(TaskModel task, ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? "";

		// 状態の切り替え判定
		if (string.IsNullOrWhiteSpace(task.DoneDateString) && !string.IsNullOrWhiteSpace(newValue))
		{
			task.IsActive = 0;
		}
		else if (!string.IsNullOrWhiteSpace(task.DoneDateString) && string.IsNullOrWhiteSpace(newValue))
		{
			task.IsActive = 2;
		}

		// 日付のパース
		if (!DateTime.TryParse(newValue, out var doneDate) && !string.IsNullOrWhiteSpace(newValue))
		{
			LogMessage = "タスク完了日時の形式が正しくありません。";
			IsErrorMessage = true;
			StateHasChanged();
			return;
		}

		task.DoneDate = doneDate;
		task.DoneDateString = newValue;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;

			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;

			// DB値で復元
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DoneDate = dbTask.DoneDate;
				task.DoneDateString = dbTask.DoneDate?.ToString("yyyy-MM-ddTHH:mm") ?? string.Empty;
			}
		}

		StateHasChanged();
	}


	private async Task OnTagChanged(TaskModel task, object newTagNo)
	{
		task.TagNo = Convert.ToInt32(newTagNo);
		await SaveTaskAsync(task);
	}

	private async Task OnStatusChanged(TaskModel task, int newStatus)
	{
		if(task.IsActive != 0 && newStatus == 0)
		{
			task.DoneDate = DateTime.Now;
			task.DoneDateString = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
		}
		else if (task.IsActive == 0 && newStatus != 0)
		{
			task.DoneDate = null;
			task.DoneDateString = "";
		}

		task.IsActive = newStatus;
		await SaveTaskAsync(task);
	}

	protected override void OnInitialized()
	{
		TagDictionary = TaskTagService.GetTagDictionary();
		Tasks = TaskService.LoadTasks("X"); // 仮のユーザーID

		// Temp系に値をコピーしておく（初期表示用）
		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}

		UpdatePage();
	}

	private void UpdatePage()
	{
		PagedTasks = TaskService.GetPagedTasks(Tasks, PageIndex, PageSize);
		StateHasChanged();
	}

	private void NextPage()
	{
		if ((PageIndex + 1) * PageSize < Tasks.Count)
		{
			PageIndex++;
			UpdatePage();
		}
	}

	private void PreviousPage()
	{
		if (PageIndex > 0)
		{
			PageIndex--;
			UpdatePage();
		}
	}

	private async Task ValidateAndSaveTaskAsync(TaskModel task)
	{
		if (string.IsNullOrWhiteSpace(task.TempTaskName))
		{
			LogMessage = "タスク名は必須です。";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempTaskName = dbTask.TaskName;
			}

			StateHasChanged();
			return;
		}

		if (task.TempTaskName.Length > 15)
		{
			LogMessage = "タスク名は15文字以内で入力してください。";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempTaskName = dbTask.TaskName;
			}

			StateHasChanged();
			return;  // 保存はしない
		}

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				StateHasChanged();
				return;
			}

			// 変更がなければ何もしない（メッセージもクリア）
			if (dbTask.TaskName == task.TempTaskName)
			{
				LogMessage = "";
				IsErrorMessage = false;
				StateHasChanged();
				return;
			}

			// 保存処理
			task.TaskName = task.TempTaskName;
			await TaskService.UpdateTask(task);

			// 更新日時をDBから再取得
			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			// 変更内容のメッセージ作成
			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;
			}
			else
			{
				LogMessage = "";
				IsErrorMessage = false;
			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;
		}

		StateHasChanged();
	}



	private async Task SaveDescriptionAsync(TaskModel task)
	{
		var input = task.TempDescription?.Trim() ?? "";

		if (input.Length > 30)
		{
			LogMessage = "説明は30文字以内で入力してください。";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempDescription = dbTask.Description ?? "";
			}

			StateHasChanged();
			return;
		}

		task.Description = string.IsNullOrWhiteSpace(input) ? null : input;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			// 変更がなければメッセージをクリアして何もしない
			if ((dbTask.Description ?? "") == input)
			{
				LogMessage = "";
				IsErrorMessage = false;
				StateHasChanged();
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;
			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.Description = dbTask.Description;
				task.TempDescription = dbTask.Description ?? "";
			}
		}

		StateHasChanged();
	}

	private async Task SaveTaskAsync(TaskModel task)
	{
		try
		{
			TaskModel? dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				IsErrorMessage = true;
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			// DB更新
			await TaskService.UpdateTask(task);

			// 更新日時反映
			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			// ログメッセージ
			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;

			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.GetType().Name} - {ex.Message}";
			IsErrorMessage = true;
			if (ex.InnerException != null)
			{
				LogMessage += $" | Inner: {ex.InnerException.Message}";
			}
		}
		StateHasChanged();
	}

	private void MarkDone()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();
		TaskService.CompleteTasks(selected);
		Tasks = TaskService.LoadTasks("X");
		UpdatePage();
	}

	private void DeleteTasks()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();
		TaskService.DeleteTasks(selected);
		Tasks = TaskService.LoadTasks("X");
		UpdatePage();
	}
}
