@page "/tasklist"

@using TaskManagementWeb.Services
@using TaskManagementWeb.Models
@using TaskManagementWeb.Helpers
@inject UserSessionService UserSessionService
@inject NavigationManager Navigation
@inject TaskService TaskService
@inject TaskTagService TaskTagService
@inject IJSRuntime JS

<!-- 全体コンテナ -->
<div class="flex flex-col h-screen px-4">

	<!-- タイトル -->
	<div class="flex items-center mb-2 border-b border-gray-300 pb-1 justify-between">
		<div class="flex items-center gap-2 ml-2">
			<img src="images/tasklist_icon.svg" alt="タスク管理アプリアイコン"
				 style="width: 25px; height: 25px;" />
			<h3 class="text-xl font-semibold text-gray-800 m-0">
				タスク一覧
			</h3>
		</div>

		<div class="flex items-center gap-2">
			<span class="text-gray-700 font-medium">@UserSessionService.UserId</span>
			<button class="bg-transparent border-none cursor-pointer p-0" title="ログアウト" @onclick="OnLogoutClicked" style="width: 28px; height: 28px;">
				<img src="images/logout.svg" alt="ログアウト" style="width: 100%; height: 100%;" />
			</button>
		</div>
	</div>

	<div class="mb-1 px-6 py-4 bg-gray-100 border border-gray-300 rounded-lg shadow-sm">

		<!-- 横並び＋wrapで折返し対応 -->
		<div class="flex flex-wrap items-end gap-x-6 gap-y-4 w-full">

			<!-- 各検索条件 -->
			<div class="flex flex-col w-48">
				<label for="txtTaskName" class="text-sm font-medium text-gray-700 mb-1">タスク名</label>
				<InputText id="txtTaskName"
						   class="border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300"
						   @bind-Value="SearchTaskName"
						   maxlength="15" />
			</div>

			<div class="flex flex-col w-48">
				<label for="tagComboBox" class="text-sm font-medium text-gray-700 mb-1">タスク分類</label>
				<InputSelect id="tagComboBox" class="border border-gray-300 rounded px-2 py-1 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-300" @bind-Value="SearchTag">
					<option value="">全て</option>
					@foreach (var tag in TaskTags)
					{
						<option value="@tag">@tag</option>
					}
				</InputSelect>
			</div>

			<div class="flex flex-col w-48">
				<label for="txtDateFrom" class="text-sm font-medium text-gray-700 mb-1">タスク完了期限（開始）</label>
				<InputDate id="txtDateFrom" class="border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300" @bind-Value="SearchDateFrom" />
			</div>

			<div class="flex flex-col w-48">
				<label for="txtDateTo" class="text-sm font-medium text-gray-700 mb-1">タスク完了期限（終了）</label>
				<InputDate id="txtDateTo" class="border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300" @bind-Value="SearchDateTo" />
			</div>

			<div class="flex flex-col w-48">
				<label for="txtDueDate" class="text-sm font-medium text-gray-700 mb-1">タスク完了日</label>
				<InputDate id="txtDueDate" class="border border-gray-300 rounded px-2 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-blue-300" @bind-Value="SearchDueDate" />
			</div>

			<div class="flex flex-col w-36">
				<label for="activeComboBox" class="text-sm font-medium text-gray-700 mb-1">タスク状況</label>
				<InputSelect id="activeComboBox" class="border border-gray-300 rounded px-2 py-1 text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-300" @bind-Value="SearchActiveStatus">
					<option value="">全て</option>
					<option value="完了">完了</option>
					<option value="着手中">着手中</option>
					<option value="未着手">未着手</option>
				</InputSelect>
			</div>

			<!-- 検索・リセットボタン -->
			<div class="flex items-center gap-3">
				<button class="px-4 py-1.5 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition" @onclick="OnSearchClicked">検索</button>
				<button class="px-4 py-1.5 bg-gray-400 text-white text-sm rounded hover:bg-gray-500 transition" @onclick="OnResetClicked">リセット</button>
			</div>
		</div>
	</div>

	<div class="flex">
		@if (!string.IsNullOrEmpty(SearchLogMessage))
		{
			<div class="text-sm inline-block @(IsErrorSearchLogMessage ? "text-red-700 bg-red-100 border border-red-400 rounded p-2" : "text-green-700 bg-green-100 border border-green-400 rounded p-2")">
				@SearchLogMessage
			</div>
		}

		<div class="ml-auto" style="transform: translateY(3px);">
			<button class="px-4 py-1.5 bg-green-600 text-white text-sm rounded hover:bg-green-700 transition"
					@onclick="OnNewTaskClicked">
				新規登録
			</button>
		</div>
	</div>

@if (IsTaskCreateModalOpen)
{
<TaskCreateModal
    UserId="@UserSessionService.UserId"
    IsOpen="IsTaskCreateModalOpen"
    OnClose="CloseTaskCreateModal"
    OnTaskCreated="HandleTaskCreated" />
}


	<!-- ヘッダー＋テーブルヘッダーをまとめてsticky固定 -->
	<div class="sticky top-0 z-50 bg-white pt-1 pb-0">

		<!-- テーブル ヘッダー行だけ -->
		<table class="table-auto w-full border-collapse border-spacing-0 table-fixed">
			<colgroup>
				<col style="width: 19%;" />
				<col style="width: 21%;" />
				<col style="width: 8%;" />
				<col style="width: 12%;" />
				<col style="width: 13%;" />
				<col style="width: 11%;" />
				<col style="width: 8%;" />
				<col style="width: 6%;" />
			</colgroup>
			<thead>
				<tr class="h-14 leading-6 border-t-2 border-b-2 border-l-2 border-r-2 border-black">
					<th class="p-1 bg-white">タスク名</th>
					<th class="p-1 bg-white">説明</th>
					<th class="p-1 bg-white">タスク分類</th>
					<th class="p-1 bg-white">タスク完了期限</th>
					<th class="p-1 bg-white">タスク完了日時</th>
					<th class="p-1 bg-white">タスク更新日時</th>
					<th class="p-1 bg-white">タスク状況</th>
					<th class="p-1 text-center bg-white">
						<span class="inline-block text-center w-full" style="position: relative; left: -0.2cm;">選択</span>
					</th>
				</tr>
			</thead>
		</table>
	</div>

	<!-- テーブル本体のスクロール領域（ヘッダーとは別のテーブルでtbodyのみ） -->
	<div class="flex-grow overflow-auto relative" style="border-right: 2px solid black; border-left: 2px solid black;">

		@if (Tasks == null)
		{
			<p>読み込み中...</p>
		}
		else
		{
			<table class="table-auto w-full border-collapse table-fixed">
				<colgroup>
					<col style="width: 18%;" />
					<col style="width: 20%;" />
					<col style="width: 8%;" />
					<col style="width: 12%;" />
					<col style="width: 12%;" />
					<col style="width: 10%;" />
					<col style="width: 8%;" />
					<col style="width: 5%;" />
				</colgroup>
				<tbody>
					@foreach (var task in Tasks)
					{
						<tr>
							<td class="p-2 border border-gray-300">
								<textarea id="taskName-@task.TaskNo"
										  value="@task.TempTaskName"
										  @oninput="(e) => OnTaskNameInput(task, e)"
										  @onblur="async () => await ValidateAndSaveTaskAsync(task)"
										  class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200"></textarea>
							</td>
							<td class="p-2 border border-gray-300">
								<textarea id="description-@task.TaskNo"
										  value="@task.TempDescription"
										  @oninput="(e) => OnDescriptionInput(task, e)"
										  @onblur="async () => await SaveDescriptionAsync(task)"
										  class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200"></textarea>
							</td>
							<td class="p-2 border border-gray-300">
								<InputSelect TValue="int"
											 Value="@task.TagNo"
											 ValueChanged="@(v => OnTagChanged(task, v))"
											 ValueExpression="(() => task.TagNo)"
											 class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
									@foreach (var tag in TagDictionary)
									{
										<option value="@tag.Key">@tag.Value</option>
									}
								</InputSelect>
							</td>
							<td class="p-2 border border-gray-300">
								<input type="datetime-local"
									   value="@task.DueDateString"
									   @oninput="(e) => task.DueDateString = e.Value?.ToString() ?? string.Empty"
									   @onchange="async (e) => await OnDueDateChangedAsync(task, e)"
									   class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200" />
							</td>
							<td class="p-2 border border-gray-300">
								<input type="datetime-local"
									   value="@task.DoneDateString"
									   @onchange="async (e) => await OnDoneDateChangedAsync(task, e)"
									   class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200" />
							</td>
							<td class="p-2 border border-gray-300 text-gray-700">
								@task.UpdateDate?.ToString("yyyy/MM/dd HH:mm")
							</td>
							<td class="p-2 border border-gray-300">
								<InputSelect TValue="int"
											 Value="@task.IsActive"
											 ValueChanged="@(v => OnStatusChanged(task, v))"
											 ValueExpression="(() => task.IsActive)"
											 class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
									@foreach (var status in TaskStatusHelper.StatusMap)
									{
										<option value="@status.Key">@status.Value</option>
									}
								</InputSelect>
							</td>
							<td class="p-2 border border-gray-300 text-center" style="border-right: none;">
								<input type="checkbox" @bind="task.IsChecked" />
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>

	<!-- フッター -->
	<div class="bg-white border-t-2 border-black px-0 py-3 flex items-center justify-between relative">
		@if (!string.IsNullOrEmpty(EditLogMessage))
		{
			<div class="text-sm @(IsErrorEditLogMessage ? "text-red-700 bg-red-100 border border-red-400 rounded p-2" : "text-green-700 bg-green-100 border border-green-400 rounded p-2")">
				@EditLogMessage
			</div>
		}
		<div class="flex gap-4 ml-auto">
			<button class="px-4 py-2 bg-green-500 text-white rounded" @onclick="OnClickMarkDoneAsync">完了</button>
			<button class="px-4 py-2 bg-red-500 text-white rounded" @onclick="OnClickDeleteTasksAsync">削除</button>
		</div>
	</div>

</div>

@code {
	private List<TaskModel> Tasks;
	private bool IsErrorEditLogMessage = false;
	private string EditLogMessage = string.Empty;
	private bool IsErrorSearchLogMessage = false;
	private string SearchLogMessage = string.Empty;

	private Dictionary<int, string> TagDictionary = new();

	private string SearchTaskName { get; set; } = "";
	private string SearchTag { get; set; } = "";
	private DateTime? SearchDateFrom { get; set; }
	private DateTime? SearchDateTo { get; set; }
	private DateTime? SearchDueDate { get; set; }
	private string SearchActiveStatus { get; set; } = "";

	private List<string> TaskTags = new();

	protected override async Task OnInitializedAsync()
	{
		if (string.IsNullOrEmpty(UserSessionService.UserId))
		{
			// セッション切れ：ログイン画面へリダイレクト
			Navigation.NavigateTo("/", forceLoad: true);
			return;
		}

		// 以下、通常の初期化処理
		TagDictionary = TaskTagService.GetTagDictionary();
		TaskTags = TagDictionary.Values.ToList();

		Tasks = await TaskService.SearchTasksAsync(
			taskName: "",
			tagName: "全て",
			dateFrom: "",
			dateTo: "",
			dateDone: "",
			active: "全て",
			userId: UserSessionService.UserId); 

		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}

		IsErrorSearchLogMessage = false;
		SearchLogMessage = $"{Tasks.Count} 件のタスクが見つかりました。";
	}


	private async Task OnSearchClicked()
	{
		if (SearchDateFrom.HasValue && SearchDateTo.HasValue && SearchDateFrom > SearchDateTo)
		{
			IsErrorSearchLogMessage = true;
			SearchLogMessage = "タスク完了期限(開始日)は、タスク完了期限(終了日)と\n同じか前の日付を設定してください";
			return;
		}

		await ReloadTasksWithSearchConditionAsync();
	}

	private async Task ReloadTasksWithSearchConditionAsync()
	{
		string doneDateStr = SearchDueDate.HasValue
			? SearchDueDate.Value.ToString("yyyy/MM/dd")
			: "";

		string isActiveStr = SearchActiveStatus switch
		{
			"完了" => "完了",
			"着手中" => "着手中",
			"未着手" => "未着手",
			_ => "全て"
		};

		Tasks = await TaskService.SearchTasksAsync(
			taskName: SearchTaskName,
			tagName: string.IsNullOrEmpty(SearchTag) ? "全て" : SearchTag,
			dateFrom: SearchDateFrom?.ToString("yyyy-MM-dd") ?? "",
			dateTo: SearchDateTo?.ToString("yyyy-MM-dd") ?? "",
			dateDone: doneDateStr,
			active: isActiveStr,
			userId: UserSessionService.UserId);

		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}

		IsErrorSearchLogMessage = false;
		SearchLogMessage = $"{Tasks.Count} 件のタスクが見つかりました。";

		StateHasChanged();
	}

	private async Task OnResetClicked()
	{
		SearchTaskName = "";
		SearchTag = "";
		SearchDateFrom = null;
		SearchDateTo = null;
		SearchDueDate = null;
		SearchActiveStatus = "";

		Tasks = await TaskService.SearchTasksAsync(
			taskName: "",
			tagName: "全て",
			dateFrom: "",
			dateTo: "",
			dateDone: "",
			active: "全て",
			userId: UserSessionService.UserId);

		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}

		IsErrorSearchLogMessage = false;
		SearchLogMessage = $"{Tasks.Count} 件のタスクが見つかりました。";

		StateHasChanged();
	}

	private void OnTaskNameInput(TaskModel task, ChangeEventArgs e)
	{
		var input = e.Value?.ToString() ?? "";
		task.TempTaskName = input;
		EditLogMessage = "";  // 入力中はエラー表示なし
		StateHasChanged();
	}

	private void OnDescriptionInput(TaskModel task, ChangeEventArgs e)
	{
		var input = e.Value?.ToString() ?? "";

		if (input.Length > 30)
		{
			EditLogMessage = "説明は30文字以内で入力してください。";
			IsErrorEditLogMessage = true;
		}
		else
		{
			EditLogMessage = "";
			IsErrorEditLogMessage = false;
		}

		task.TempDescription = input;

		StateHasChanged();
	}

	private (bool hasChanges, string changeMessage) GetChangeMessage(TaskModel dbTask, TaskModel currentTask)
	{
		var messages = new List<string>();

		string FromOrBlank(string? text) => string.IsNullOrWhiteSpace(text) ? "未設定" : text;

		if (dbTask.TaskName != currentTask.TaskName)
			messages.Add($"タスク名：{FromOrBlank(dbTask.TaskName)} ⇒ {FromOrBlank(currentTask.TaskName)}");

		string NormalizeDescription(string? desc) => string.IsNullOrWhiteSpace(desc) ? "" : desc;

		if (NormalizeDescription(dbTask.Description) != NormalizeDescription(currentTask.Description))
			messages.Add($"説明：{FromOrBlank(dbTask.Description)} ⇒ {FromOrBlank(currentTask.Description)}");

		if (dbTask.TagNo != currentTask.TagNo)
			messages.Add($"タスク分類：{TagDictionary.GetValueOrDefault(dbTask.TagNo, "未設定")} ⇒ {TagDictionary.GetValueOrDefault(currentTask.TagNo, "未設定")}");

		if (dbTask.DueDate?.ToString("yyyy/MM/dd HH:mm") != currentTask.DueDate?.ToString("yyyy/MM/dd HH:mm"))
			messages.Add($"タスク完了期限：{dbTask.DueDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"} ⇒ {currentTask.DueDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"}");

		if (dbTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") != currentTask.DoneDate?.ToString("yyyy/MM/dd HH:mm"))
			messages.Add($"タスク完了日時：{dbTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"} ⇒ {currentTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"}");

		if (dbTask.IsActive != currentTask.IsActive)
			messages.Add($"タスク状況：{TaskStatusHelper.StatusMap[dbTask.IsActive]} ⇒ {TaskStatusHelper.StatusMap[currentTask.IsActive]}");

		bool hasChanges = messages.Count > 0;
		string changeMessage = string.Join(" | ", messages);

		return (hasChanges, changeMessage);
	}

	private async Task OnDueDateChangedAsync(TaskModel task, ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? "";

		if (string.IsNullOrWhiteSpace(newValue))
		{
			EditLogMessage = "タスク完了期限は必須です。";
			IsErrorEditLogMessage = true;
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DueDateString = dbTask.DueDate?.ToString("yyyy-MM-ddTHH:mm") ?? "";
				task.DueDate = dbTask.DueDate;
			}
			StateHasChanged();
			return;
		}

		if (!DateTime.TryParse(newValue, out var dueDate))
		{
			EditLogMessage = "タスク完了期限の形式が正しくありません。";
			IsErrorEditLogMessage = true;
			StateHasChanged();
			return;
		}

		task.DueDateString = newValue;
		task.DueDate = dueDate;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				EditLogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				EditLogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorEditLogMessage = false;
			}
		}
		catch (Exception ex)
		{
			EditLogMessage = $"保存失敗: {ex.Message}";
			IsErrorEditLogMessage = true;
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DueDateString = dbTask.DueDate?.ToString("yyyy-MM-ddTHH:mm") ?? "";
				task.DueDate = dbTask.DueDate;
			}
		}
		StateHasChanged();
	}

	private async Task OnDoneDateChangedAsync(TaskModel task, ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? "";

		// 状態の切り替え判定
		if (string.IsNullOrWhiteSpace(task.DoneDateString) && !string.IsNullOrWhiteSpace(newValue))
		{
			task.IsActive = 0;
		}
		else if (!string.IsNullOrWhiteSpace(task.DoneDateString) && string.IsNullOrWhiteSpace(newValue))
		{
			task.IsActive = 2;
		}

		// 日付のパース
		if (!DateTime.TryParse(newValue, out var doneDate) && !string.IsNullOrWhiteSpace(newValue))
		{
			EditLogMessage = "タスク完了日時の形式が正しくありません。";
			IsErrorEditLogMessage = true;
			StateHasChanged();
			return;
		}

		task.DoneDate = doneDate;
		task.DoneDateString = newValue;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				EditLogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				EditLogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorEditLogMessage = false;

			}
		}
		catch (Exception ex)
		{
			EditLogMessage = $"保存失敗: {ex.Message}";
			IsErrorEditLogMessage = true;

			// DB値で復元
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DoneDate = dbTask.DoneDate;
				task.DoneDateString = dbTask.DoneDate?.ToString("yyyy-MM-ddTHH:mm") ?? string.Empty;
			}
		}

		StateHasChanged();
	}


	private async Task OnTagChanged(TaskModel task, object newTagNo)
	{
		task.TagNo = Convert.ToInt32(newTagNo);
		await SaveTaskAsync(task);
	}

	private async Task OnStatusChanged(TaskModel task, int newStatus)
	{
		if(task.IsActive != 0 && newStatus == 0)
		{
			task.DoneDate = DateTime.Now;
			task.DoneDateString = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
		}
		else if (task.IsActive == 0 && newStatus != 0)
		{
			task.DoneDate = null;
			task.DoneDateString = "";
		}

		task.IsActive = newStatus;
		await SaveTaskAsync(task);
	}


	private async Task ValidateAndSaveTaskAsync(TaskModel task)
	{
		if (string.IsNullOrWhiteSpace(task.TempTaskName))
		{
			EditLogMessage = "タスク名は必須です。";
			IsErrorEditLogMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempTaskName = dbTask.TaskName;
			}

			StateHasChanged();
			return;
		}

		if (task.TempTaskName.Length > 15)
		{
			EditLogMessage = "タスク名は15文字以内で入力してください。";
			IsErrorEditLogMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempTaskName = dbTask.TaskName;
			}

			StateHasChanged();
			return;  // 保存はしない
		}

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				EditLogMessage = "対象タスクが見つかりませんでした。";
				StateHasChanged();
				return;
			}

			// 変更がなければ何もしない（メッセージもクリア）
			if (dbTask.TaskName == task.TempTaskName)
			{
				EditLogMessage = "";
				IsErrorEditLogMessage = false;
				StateHasChanged();
				return;
			}

			// 保存処理
			task.TaskName = task.TempTaskName;
			await TaskService.UpdateTask(task);

			// 更新日時をDBから再取得
			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			// 変更内容のメッセージ作成
			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			if (hasChanges)
			{
				EditLogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorEditLogMessage = false;
			}
			else
			{
				EditLogMessage = "";
				IsErrorEditLogMessage = false;
			}
		}
		catch (Exception ex)
		{
			EditLogMessage = $"保存失敗: {ex.Message}";
			IsErrorEditLogMessage = true;
		}

		StateHasChanged();
	}



	private async Task SaveDescriptionAsync(TaskModel task)
	{
		var input = task.TempDescription?.Trim() ?? "";

		// 31文字以上なら条件に応じて処理
		if (input.Length > 30)
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				EditLogMessage = "対象タスクが見つかりませんでした。";
				IsErrorEditLogMessage = true;
				StateHasChanged();
				return;
			}

			if (string.IsNullOrWhiteSpace(dbTask.Description))
			{
				// 元が未設定 → 説明を未設定として保存する
				task.Description = null;
				task.TempDescription = "";
				try
				{
					await TaskService.UpdateTask(task);

					var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
					if (updated != null)
					{
						task.UpdateDate = updated.UpdateDate;
					}

					EditLogMessage = "説明は30文字以内で入力してください。";
					IsErrorEditLogMessage = true;
				}
				catch (Exception ex)
				{
					EditLogMessage = $"保存失敗: {ex.Message}";
					IsErrorEditLogMessage = true;
				}
			}
			else
			{
				// 元が設定済み → 差し戻して保存はしない
				task.TempDescription = dbTask.Description ?? "";
				EditLogMessage = "説明は30文字以内で入力してください。";
				IsErrorEditLogMessage = true;
			}

			StateHasChanged();
			return;
		}

		// 正常な入力なら保存処理を続行
		task.Description = string.IsNullOrWhiteSpace(input) ? null : input;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				EditLogMessage = "対象タスクが見つかりませんでした。";
				IsErrorEditLogMessage = true;
				StateHasChanged();
				return;
			}

			// 変更なければ何もしない
			if ((dbTask.Description ?? "") == input)
			{
				EditLogMessage = "";
				IsErrorEditLogMessage = false;
				StateHasChanged();
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				EditLogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorEditLogMessage = false;
			}
		}
		catch (Exception ex)
		{
			EditLogMessage = $"保存失敗: {ex.Message}";
			IsErrorEditLogMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.Description = dbTask.Description;
				task.TempDescription = dbTask.Description ?? "";
			}
		}

		StateHasChanged();
	}


	private async Task SaveTaskAsync(TaskModel task)
	{
		try
		{
			TaskModel? dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				EditLogMessage = "対象タスクが見つかりませんでした。";
				IsErrorEditLogMessage = true;
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			// DB更新
			await TaskService.UpdateTask(task);

			// 更新日時反映
			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			// ログメッセージ
			if (hasChanges)
			{
				EditLogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorEditLogMessage = false;

			}
		}
		catch (Exception ex)
		{
			EditLogMessage = $"保存失敗: {ex.GetType().Name} - {ex.Message}";
			IsErrorEditLogMessage = true;
			if (ex.InnerException != null)
			{
				EditLogMessage += $" | Inner: {ex.InnerException.Message}";
			}
		}
		StateHasChanged();
	}

	private async Task OnClickMarkDoneAsync()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();

		if (selected.Count == 0)
		{
			await JS.InvokeVoidAsync("alert", "タスクが選択されていません。");
			return;
		}

		if (await JS.InvokeAsync<bool>("showConfirm", "選択されたタスクを完了にしますか？"))
		{
			await MarkDoneAsync();
		}
	}

	private async Task OnClickDeleteTasksAsync()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();

		if (selected.Count == 0)
		{
			await JS.InvokeVoidAsync("alert", "タスクが選択されていません。");
			return;
		}

		if (await JS.InvokeAsync<bool>("showConfirm", "選択されたタスクを削除しますか？\nこの操作は元に戻せません。"))
		{
			await DeleteTasksAsync();
		}
	}

	private async Task MarkDoneAsync()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();
		if (selected.Count == 0) return;

		// 既に完了済みのタスクを抽出
		var alreadyCompleted = selected.Where(t => t.IsActive == 0).ToList();

		if (alreadyCompleted.Any())
		{
			EditLogMessage = "完了済みのタスクが選択されていたため、完了できませんでした。";
			IsErrorEditLogMessage = true;
			StateHasChanged();
			return;
		}

		// 完了処理
		TaskService.CompleteTasks(selected);
		await ReloadTasksWithSearchConditionAsync();

		// ✅ 成功メッセージ追加
		EditLogMessage = "選択されたタスクを完了しました。";
		IsErrorEditLogMessage = false;
		StateHasChanged();
	}

	private async Task DeleteTasksAsync()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();
		if (selected.Count == 0) return;

		TaskService.DeleteTasks(selected);
		await ReloadTasksWithSearchConditionAsync();

		// ✅ 成功メッセージ追加
		EditLogMessage = "選択されたタスクを削除しました。";
		IsErrorEditLogMessage = false;
		StateHasChanged();
	}

	private void OnLogoutClicked()
	{
		UserSessionService.UserId = null;
		UserSessionService.UserName = null;
		Navigation.NavigateTo("/");
	}

	private bool IsTaskCreateModalOpen = false;

	private async Task OnNewTaskClicked()
	{
		IsTaskCreateModalOpen = true;
		await InvokeAsync(StateHasChanged);
	}

	private void CloseTaskCreateModal()
	{
		IsTaskCreateModalOpen = false;
	}

	private async Task HandleTaskCreated(TaskModel newTask)
	{
		await TaskService.CreateTaskAsync(newTask);
		await ReloadTasksWithSearchConditionAsync();
		EditLogMessage = $"「{newTask.TaskName}」を新しく登録しました。";
		IsErrorSearchLogMessage = false;
	}
}
