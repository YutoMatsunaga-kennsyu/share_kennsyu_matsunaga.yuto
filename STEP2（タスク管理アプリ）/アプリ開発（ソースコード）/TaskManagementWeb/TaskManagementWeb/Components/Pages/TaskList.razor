@page "/"

@using TaskManagementWeb.Services
@using TaskManagementWeb.Models
@using TaskManagementWeb.Helpers
@inject TaskService TaskService
@inject TaskTagService TaskTagService

<!-- 全体コンテナ -->
<div class="flex flex-col h-screen">

	<!-- ヘッダー＋テーブルヘッダーをまとめてsticky固定 -->
	<div class="sticky top-0 z-50 bg-white pt-2 pb-0">

		<!-- タイトル -->
		<h3 class="text-xl font-bold mb-1">タスク一覧</h3>

		<!-- テーブル ヘッダー行だけ -->
		<table class="table-auto w-full border-collapse border-spacing-0 table-fixed">
			<colgroup>
				<col style="width: 19%;" />
				<col style="width: 21%;" />
				<col style="width: 8%;" />
				<col style="width: 12%;" />
				<col style="width: 13%;" />
				<col style="width: 11%;" />
				<col style="width: 8%;" />
				<col style="width: 6%;" />
			</colgroup>
			<thead>
				<tr class="h-14 leading-6 border-t-2 border-b-2 border-black">
					<th class="p-2 bg-white">タスク名</th>
					<th class="p-2 bg-white">説明</th>
					<th class="p-2 bg-white">タスク分類</th>
					<th class="p-2 bg-white">タスク完了期限</th>
					<th class="p-2 bg-white">タスク完了日時</th>
					<th class="p-2 bg-white">タスク更新日時</th>
					<th class="p-2 bg-white">タスク状況</th>
					<th class="p-2 text-center bg-white">
						<span class="inline-block text-center w-full" style="position: relative; left: -0.2cm;">選択</span>
					</th>
				</tr>
			</thead>
		</table>
	</div>

	<!-- テーブル本体のスクロール領域（ヘッダーとは別のテーブルでtbodyのみ） -->
	<div class="flex-grow overflow-auto relative">

		@if (Tasks == null)
		{
			<p>読み込み中...</p>
		}
		else
		{
			<table class="table-auto w-full border-separate border-spacing-0 table-fixed">
				<colgroup>
					<col style="width: 18%;" />
					<col style="width: 20%;" />
					<col style="width: 8%;" />
					<col style="width: 12%;" />
					<col style="width: 12%;" />
					<col style="width: 10%;" />
					<col style="width: 8%;" />
					<col style="width: 5%;" />
				</colgroup>
				<tbody>
					@foreach (var task in Tasks)
					{
						<tr>
							<td class="p-2 border border-gray-300">
								<textarea id="taskName-@task.TaskNo"
										  value="@task.TempTaskName"
										  @oninput="(e) => OnTaskNameInput(task, e)"
										  @onblur="async () => await ValidateAndSaveTaskAsync(task)"
										  class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200"></textarea>
							</td>
							<td class="p-2 border border-gray-300">
								<textarea id="description-@task.TaskNo"
										  value="@task.TempDescription"
										  @oninput="(e) => OnDescriptionInput(task, e)"
										  @onblur="async () => await SaveDescriptionAsync(task)"
										  class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200"></textarea>
							</td>
							<td class="p-2 border border-gray-300">
								<InputSelect TValue="int"
											 Value="@task.TagNo"
											 ValueChanged="@(v => OnTagChanged(task, v))"
											 ValueExpression="(() => task.TagNo)"
											 class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
									@foreach (var tag in TagDictionary)
									{
										<option value="@tag.Key">@tag.Value</option>
									}
								</InputSelect>
							</td>
							<td class="p-2 border border-gray-300">
								<input type="datetime-local"
									   value="@task.DueDateString"
									   @oninput="(e) => task.DueDateString = e.Value?.ToString() ?? string.Empty"
									   @onchange="async (e) => await OnDueDateChangedAsync(task, e)"
									   class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200" />
							</td>
							<td class="p-2 border border-gray-300">
								<input type="datetime-local"
									   value="@task.DoneDateString"
									   @onchange="async (e) => await OnDoneDateChangedAsync(task, e)"
									   class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200" />
							</td>
							<td class="p-2 border border-gray-300 text-gray-700">
								@task.UpdateDate?.ToString("yyyy/MM/dd HH:mm")
							</td>
							<td class="p-2 border border-gray-300">
								<InputSelect TValue="int"
											 Value="@task.IsActive"
											 ValueChanged="@(v => OnStatusChanged(task, v))"
											 ValueExpression="(() => task.IsActive)"
											 class="w-full box-border font-normal bg-transparent border border-transparent hover:border-gray-300 focus:border-blue-500 focus:bg-white focus:ring-2 focus:ring-blue-200 rounded transition duration-200">
									@foreach (var status in TaskStatusHelper.StatusMap)
									{
										<option value="@status.Key">@status.Value</option>
									}
								</InputSelect>
							</td>
							<td class="p-2 border border-gray-300 text-center">
								<input type="checkbox" @bind="task.IsChecked" />
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>

	<!-- フッター -->
	<div class="bg-white border-t border-gray-300 px-4 py-3 flex items-center justify-between relative">
		@if (!string.IsNullOrEmpty(LogMessage))
		{
			<div class="text-sm @(IsErrorMessage ? "text-red-700 bg-red-100 border border-red-400 rounded p-2" : "text-green-700 bg-green-100 border border-green-400 rounded p-2")">
				@LogMessage
			</div>
		}
		<div class="flex gap-4 ml-auto">
			<button class="px-4 py-2 bg-green-500 text-white rounded" @onclick="MarkDone">完了</button>
			<button class="px-4 py-2 bg-red-500 text-white rounded" @onclick="DeleteTasks">削除</button>
		</div>
	</div>

</div>

@code {
	private List<TaskModel> Tasks;
	private bool IsErrorMessage = false;
	private string LogMessage = string.Empty;

	private Dictionary<int, string> TagDictionary = new();

	private void OnTaskNameInput(TaskModel task, ChangeEventArgs e)
	{
		var input = e.Value?.ToString() ?? "";
		task.TempTaskName = input;
		LogMessage = "";  // 入力中はエラー表示なし
		StateHasChanged();
	}

	private void OnDescriptionInput(TaskModel task, ChangeEventArgs e)
	{
		var input = e.Value?.ToString() ?? "";

		if (input.Length > 30)
		{
			LogMessage = "説明は30文字以内で入力してください。";
			IsErrorMessage = true;
		}
		else
		{
			LogMessage = "";
			IsErrorMessage = false;
		}

		task.TempDescription = input;

		StateHasChanged();
	}

	private (bool hasChanges, string changeMessage) GetChangeMessage(TaskModel dbTask, TaskModel currentTask)
	{
		var messages = new List<string>();

		string FromOrBlank(string? text) => string.IsNullOrWhiteSpace(text) ? "未設定" : text;

		if (dbTask.TaskName != currentTask.TaskName)
			messages.Add($"タスク名：{FromOrBlank(dbTask.TaskName)} ⇒ {FromOrBlank(currentTask.TaskName)}");

		string NormalizeDescription(string? desc) => string.IsNullOrWhiteSpace(desc) ? "" : desc;

		if (NormalizeDescription(dbTask.Description) != NormalizeDescription(currentTask.Description))
			messages.Add($"説明：{FromOrBlank(dbTask.Description)} ⇒ {FromOrBlank(currentTask.Description)}");

		if (dbTask.TagNo != currentTask.TagNo)
			messages.Add($"タスク分類：{TagDictionary.GetValueOrDefault(dbTask.TagNo, "未設定")} ⇒ {TagDictionary.GetValueOrDefault(currentTask.TagNo, "未設定")}");

		if (dbTask.DueDate?.ToString("yyyy/MM/dd HH:mm") != currentTask.DueDate?.ToString("yyyy/MM/dd HH:mm"))
			messages.Add($"タスク完了期限：{dbTask.DueDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"} ⇒ {currentTask.DueDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"}");

		if (dbTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") != currentTask.DoneDate?.ToString("yyyy/MM/dd HH:mm"))
			messages.Add($"タスク完了日時：{dbTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"} ⇒ {currentTask.DoneDate?.ToString("yyyy/MM/dd HH:mm") ?? "未設定"}");

		if (dbTask.IsActive != currentTask.IsActive)
			messages.Add($"タスク状況：{TaskStatusHelper.StatusMap[dbTask.IsActive]} ⇒ {TaskStatusHelper.StatusMap[currentTask.IsActive]}");

		bool hasChanges = messages.Count > 0;
		string changeMessage = string.Join(" | ", messages);

		return (hasChanges, changeMessage);
	}

	private async Task OnDueDateChangedAsync(TaskModel task, ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? "";

		if (string.IsNullOrWhiteSpace(newValue))
		{
			LogMessage = "タスク完了期限は必須です。";
			IsErrorMessage = true;
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DueDateString = dbTask.DueDate?.ToString("yyyy-MM-ddTHH:mm") ?? "";
				task.DueDate = dbTask.DueDate;
			}
			StateHasChanged();
			return;
		}

		if (!DateTime.TryParse(newValue, out var dueDate))
		{
			LogMessage = "タスク完了期限の形式が正しくありません。";
			IsErrorMessage = true;
			StateHasChanged();
			return;
		}

		task.DueDateString = newValue;
		task.DueDate = dueDate;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;
			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DueDateString = dbTask.DueDate?.ToString("yyyy-MM-ddTHH:mm") ?? "";
				task.DueDate = dbTask.DueDate;
			}
		}
		StateHasChanged();
	}

	private async Task OnDoneDateChangedAsync(TaskModel task, ChangeEventArgs e)
	{
		var newValue = e.Value?.ToString() ?? "";

		// 状態の切り替え判定
		if (string.IsNullOrWhiteSpace(task.DoneDateString) && !string.IsNullOrWhiteSpace(newValue))
		{
			task.IsActive = 0;
		}
		else if (!string.IsNullOrWhiteSpace(task.DoneDateString) && string.IsNullOrWhiteSpace(newValue))
		{
			task.IsActive = 2;
		}

		// 日付のパース
		if (!DateTime.TryParse(newValue, out var doneDate) && !string.IsNullOrWhiteSpace(newValue))
		{
			LogMessage = "タスク完了日時の形式が正しくありません。";
			IsErrorMessage = true;
			StateHasChanged();
			return;
		}

		task.DoneDate = doneDate;
		task.DoneDateString = newValue;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;

			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;

			// DB値で復元
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.DoneDate = dbTask.DoneDate;
				task.DoneDateString = dbTask.DoneDate?.ToString("yyyy-MM-ddTHH:mm") ?? string.Empty;
			}
		}

		StateHasChanged();
	}


	private async Task OnTagChanged(TaskModel task, object newTagNo)
	{
		task.TagNo = Convert.ToInt32(newTagNo);
		await SaveTaskAsync(task);
	}

	private async Task OnStatusChanged(TaskModel task, int newStatus)
	{
		if(task.IsActive != 0 && newStatus == 0)
		{
			task.DoneDate = DateTime.Now;
			task.DoneDateString = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
		}
		else if (task.IsActive == 0 && newStatus != 0)
		{
			task.DoneDate = null;
			task.DoneDateString = "";
		}

		task.IsActive = newStatus;
		await SaveTaskAsync(task);
	}

	protected override void OnInitialized()
	{
		TagDictionary = TaskTagService.GetTagDictionary();
		Tasks = TaskService.LoadTasks("X");

		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}
	}


	private async Task ValidateAndSaveTaskAsync(TaskModel task)
	{
		if (string.IsNullOrWhiteSpace(task.TempTaskName))
		{
			LogMessage = "タスク名は必須です。";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempTaskName = dbTask.TaskName;
			}

			StateHasChanged();
			return;
		}

		if (task.TempTaskName.Length > 15)
		{
			LogMessage = "タスク名は15文字以内で入力してください。";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.TempTaskName = dbTask.TaskName;
			}

			StateHasChanged();
			return;  // 保存はしない
		}

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				StateHasChanged();
				return;
			}

			// 変更がなければ何もしない（メッセージもクリア）
			if (dbTask.TaskName == task.TempTaskName)
			{
				LogMessage = "";
				IsErrorMessage = false;
				StateHasChanged();
				return;
			}

			// 保存処理
			task.TaskName = task.TempTaskName;
			await TaskService.UpdateTask(task);

			// 更新日時をDBから再取得
			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			// 変更内容のメッセージ作成
			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;
			}
			else
			{
				LogMessage = "";
				IsErrorMessage = false;
			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;
		}

		StateHasChanged();
	}



	private async Task SaveDescriptionAsync(TaskModel task)
	{
		var input = task.TempDescription?.Trim() ?? "";

		// 31文字以上なら条件に応じて処理
		if (input.Length > 30)
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				IsErrorMessage = true;
				StateHasChanged();
				return;
			}

			if (string.IsNullOrWhiteSpace(dbTask.Description))
			{
				// 元が未設定 → 説明を未設定として保存する
				task.Description = null;
				task.TempDescription = "";
				try
				{
					await TaskService.UpdateTask(task);

					var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
					if (updated != null)
					{
						task.UpdateDate = updated.UpdateDate;
					}

					LogMessage = "説明は30文字以内で入力してください。";
					IsErrorMessage = true;
				}
				catch (Exception ex)
				{
					LogMessage = $"保存失敗: {ex.Message}";
					IsErrorMessage = true;
				}
			}
			else
			{
				// 元が設定済み → 差し戻して保存はしない
				task.TempDescription = dbTask.Description ?? "";
				LogMessage = "説明は30文字以内で入力してください。";
				IsErrorMessage = true;
			}

			StateHasChanged();
			return;
		}

		// 正常な入力なら保存処理を続行
		task.Description = string.IsNullOrWhiteSpace(input) ? null : input;

		try
		{
			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				IsErrorMessage = true;
				StateHasChanged();
				return;
			}

			// 変更なければ何もしない
			if ((dbTask.Description ?? "") == input)
			{
				LogMessage = "";
				IsErrorMessage = false;
				StateHasChanged();
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			await TaskService.UpdateTask(task);

			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;
			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.Message}";
			IsErrorMessage = true;

			var dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask != null)
			{
				task.Description = dbTask.Description;
				task.TempDescription = dbTask.Description ?? "";
			}
		}

		StateHasChanged();
	}


	private async Task SaveTaskAsync(TaskModel task)
	{
		try
		{
			TaskModel? dbTask = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (dbTask == null)
			{
				LogMessage = "対象タスクが見つかりませんでした。";
				IsErrorMessage = true;
				return;
			}

			var (hasChanges, changeMessage) = GetChangeMessage(dbTask, task);

			// DB更新
			await TaskService.UpdateTask(task);

			// 更新日時反映
			var updated = await TaskService.LoadTaskByIdAsync(task.TaskNo);
			if (updated != null)
			{
				task.UpdateDate = updated.UpdateDate;
			}

			// ログメッセージ
			if (hasChanges)
			{
				LogMessage = $"「{task.TaskName}」の変更を保存しました。変更内容【{changeMessage}】";
				IsErrorMessage = false;

			}
		}
		catch (Exception ex)
		{
			LogMessage = $"保存失敗: {ex.GetType().Name} - {ex.Message}";
			IsErrorMessage = true;
			if (ex.InnerException != null)
			{
				LogMessage += $" | Inner: {ex.InnerException.Message}";
			}
		}
		StateHasChanged();
	}

	private void MarkDone()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();
		TaskService.CompleteTasks(selected);
		Tasks = TaskService.LoadTasks("X");
		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}
	}

	private void DeleteTasks()
	{
		var selected = Tasks.Where(t => t.IsChecked).ToList();
		TaskService.DeleteTasks(selected);
		Tasks = TaskService.LoadTasks("X");
		foreach (var task in Tasks)
		{
			task.TempTaskName = task.TaskName;
			task.TempDescription = task.Description ?? "";
		}
	}
}
