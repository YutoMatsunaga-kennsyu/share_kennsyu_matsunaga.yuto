@using TaskManagementWeb.Services
@using TaskManagementWeb.Models
@inject TaskTagService TaskTagService
@inject IJSRuntime JS

@if (IsOpen)
{
    <div id="modalContainer" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50" style="z-index: 9999;">
        <div id="modal" class="bg-white rounded-2xl shadow-md p-6 w-full max-w-xl border border-gray-300" @ref="ModalRef">

            <!-- ドラッグハンドル部分 -->
            <div id="modal-header"
                 class="cursor-move bg-white rounded-t-2xl border-b border-gray-300 px-4 pt-0 pb-2"
                 @ref="ModalHeaderRef">

                <!-- グリップバー（上部に詰める） -->
                <div class="mx-auto mb-2 w-8 h-1.5 bg-gray-300 rounded-full opacity-60"></div>

                <!-- 中央揃えされたアイコン＋タイトル -->
                <div class="flex items-center justify-center gap-2">
                    <img src="images/tasklist_icon.svg" alt="タスク管理アプリアイコン" class="w-6 h-6 opacity-80" />
                    <h3 class="text-xl font-semibold text-gray-800 m-0 select-none">タスク登録</h3>
                </div>
            </div>

            <!-- タスク名 -->
            <div class="mb-4 mt-4">
                <!-- mt-6で上に余白追加 -->
                <label class="block text-sm font-medium text-gray-700 mb-1">タスク名</label>
                <input maxlength="15" class="w-full border border-gray-500 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-600" @bind="TaskName" />
            </div>


            <!-- 説明 -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">説明</label>
                <textarea maxlength="30" class="w-full border border-gray-500 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-600" @bind="Description"></textarea>
            </div>

            <!-- タグ -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">タスク分類</label>
                <select class="w-full border border-gray-500 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-600" @bind="SelectedTagNo">
                    @foreach (var tag in TaskTags)
                    {
                        <option value="@tag.Key">@tag.Value</option>
                    }
                </select>
            </div>

            <!-- 期限 -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">タスク完了期限</label>
                   <input type="datetime-local" class="w-full border border-gray-500 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-600"
                            @bind="DueDate" />
            </div>

            <!-- エラー -->
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="text-sm text-red-700 bg-red-100 border border-red-400 rounded-md p-2 mb-4">@ErrorMessage</div>
            }

            <!-- ボタン -->
            <div class="flex justify-end gap-3">
                <button class="px-4 py-2 bg-gray-300 rounded" @onclick="Close">キャンセル</button>
                <button class="px-4 py-2 bg-blue-600 text-white rounded" @onclick="OnRegisterClick">登録</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string UserId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<TaskModel> OnTaskCreated { get; set; }
    [Parameter] public bool IsOpen { get; set; }

    private string TaskName = "";
    private string Description = "";
    private int SelectedTagNo;
    private string ErrorMessage = "";
    private Dictionary<int, string> TaskTags = new();
    private ElementReference ModalHeaderRef;
    private ElementReference ModalRef;

    private DateTime? DueDate = DateTime.Today;

    protected override void OnInitialized()
    {
        TaskTags = TaskTagService.GetTagDictionary();
        if (TaskTags.Any())
            SelectedTagNo = TaskTags.Keys.First();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsOpen && ModalRef.Id != null && ModalHeaderRef.Id != null)
        {
            // そのまま ElementReference を渡すだけでOKなはず
            await JS.InvokeVoidAsync("makeDraggable", ModalRef, ModalHeaderRef);
        }
    }

    private async Task OnRegisterClick()
    {
        ErrorMessage = "";

        if (string.IsNullOrWhiteSpace(TaskName) || DueDate == null)
        {
            ErrorMessage = "タスク名、またはタスク完了期限が未入力です。";
            return;
        }

        var newTask = new TaskModel
            {
                TaskName = TaskName.Trim(),
                Description = Description.Trim(),
                TagNo = SelectedTagNo,
                DueDate = DueDate,
                UserId = UserId
            };

        await OnTaskCreated.InvokeAsync(newTask);
        await Close();
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }
}
